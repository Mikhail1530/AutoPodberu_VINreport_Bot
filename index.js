const TelegramApi = require('node-telegram-bot-api')
const token = '6838248687:AAE1ohr2ciZL26u1RtLsRqH9p0cd2EBmNdI'
const axios = require('axios')
const bot = new TelegramApi(token, {polling: true})


const tokenVin = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbnZpcm9ubWVudCI6InRlc3QiLCJ1c2VyIjp7ImlkIjoyMDg1MTEsImVtYWlsIjoiYXV0b3BvZGJlcnUxKzFAZ21haWwuY29tIn0sInZlbmRvciI6eyJpZCI6MjczLCJzdGF0dXMiOiJhY3RpdmUiLCJpcCI6WyIxNzIuMjAuMTAuMyIsIjU0Ljg2LjUwLjEzOSIsIjE4NS4xMTUuNC4xNDciLCIxODUuMTE1LjUuMjgiLCI1LjE4OC4xMjkuMjM2Il19LCJpYXQiOjE3MDYwMTI1NzQsImV4cCI6MTcwODYwNDU3NH0.D5hOhF4CUOcMlyE4meRRPggfnZpKejKgDcHrlAWM6e4'
const tokenPayment = '381764678:TEST:77012'
const instance = axios.create({
    baseURL: "https://www.clearvin.com/rest/vendor/",
    responseType: "arraybuffer",
    headers: {
        Authorization: `Bearer ${tokenVin}`,
    },
});

// variables to dataBase
let listUsersWithCheckPoints = {}
let listChecksPerMonth = 0
let listChecksAll = 0
let listChatIdUsers = ['2133980094', '2133980092', '2133980194', '2133980192', '2133280194']
const danila_ID = 342056317
// const danila_ID = 2133980094


let success = 0
let notSend = 0
const resetFunction = () => {
    success = 0
    notSend = 0
}
const resetVarPerMonth = () => {
    setInterval(() => {
        listChecksPerMonth = 0
    }, 30 * 24 * 60 * 60)
}


const KEYBOARD = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ($)', '‚öñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫'],
            ['‚úÖ VIN'],
        ],
        resize_keyboard: true
    })
}
const KEYBOARD_ADMIN = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['‚òé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫', 'üíå –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'],
            ['ü§ô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö']
        ],
        resize_keyboard: true
    })
}
const checksOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–ö—É–ø–∏—Ç—å 1 –ø—Ä–æ–≤–µ—Ä–∫—É (5$)', callback_data: 'OneCheckVIN'}],
            [{text: '–ö—É–ø–∏—Ç—å 3 –ø—Ä–æ–≤–µ—Ä–∫–∏ (14$)', callback_data: 'ThreeCheckVIN'}],
            [{text: '–ö—É–ø–∏—Ç—å 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ (20$)', callback_data: 'FiveCheckVIN'}]
        ]
    })
}
const start = () => {
    // reset variable (listChecksPerMonth) every 30 days
    resetVarPerMonth()

    bot.setMyCommands([
        {command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'},
    ])
    bot.onText(/(.+)/, async (msg, match) => {

        if (match[0] == '/start' && msg.from.id === danila_ID) {
            return bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç Danila üëãüèª', KEYBOARD_ADMIN)
        }

        if (match[0] == '/start') {
            !listChatIdUsers.includes(msg.chat.id) ? listChatIdUsers.push(msg.chat.id) : ''
            return bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç –∫—É–∫—É—à–∫–∏–Ω üëãüèª, –∑–∞–ª–µ—Ç–∞–π –Ω–∞ –ø–æ–∫—É–ø–∫–∏. –ü–æ–¥–ø–∏—à–∏—Å—å —Ç—É–¥–∞-—Å—é–¥–∞ –∏ –¥–∞–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ–±–ª–∞–Ω—Ç–∏–π —Ç—ã –Ω–µ–ª–µ–ø—ã–π', KEYBOARD)
        }

        if (match[0] == 'üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ($)') {
            return bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', checksOptions)
        }

        if (match[0] == '‚úÖ VIN' && Object.keys(listUsersWithCheckPoints).includes(`${msg.from.id}`)) {
            return bot.sendMessage(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>VIN</b> –∞–≤—Ç–æ (<i>17 —Å–∏–º–≤–æ–ª–æ–≤</i>)', {parse_mode: 'HTML'})
        }

        if (match[0].length === 17 && Object.keys(listUsersWithCheckPoints).includes(`${msg.from.id}`)) {
            //  –∑–∞–ø—Ä–æ—Å –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ VIN - —Å–¥–µ–ª–∞—Ç—å try catch
            await bot.sendMessage(msg.chat.id, '–ó–∞–ø—Ä–æ—Å —Å–¥–µ–ª–∞–Ω', KEYBOARD)
            // if request is valid -> listChecksAll += 1 and listChecksPerMonth += 1
            listUsersWithCheckPoints[msg.from.id] > 0 ? listUsersWithCheckPoints[msg.from.id] -= 1 : await bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫', KEYBOARD)
            listChecksAll += 1
            listChecksPerMonth += 1
        }

        if (match[0] == '‚öñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫') {
            const userChecks = listUsersWithCheckPoints[msg.from.id] ? listUsersWithCheckPoints[msg.from.id] : 0
            return bot.sendMessage(msg.chat.id, `–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫: ${userChecks}`)
        }


        if (match[0] == 'üíå –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' && msg.from.id === danila_ID) {
            return bot.sendMessage(msg.chat.id, `\n<b>1) –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏ —Ç–µ–∫—Å—Ç:</b> –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–µ–π.\n<b>2) –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç:</b> –ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥–æ—á–∫—É (*) –ø–µ—Ä–µ–¥ —Å—Ç—Ä–æ–∫–æ–π.\n(<i>–ø—Ä–∏–º–µ—Ä:</i> *–∫—É–∫—É –≥–∞–ª–æ—à–∏) `, {parse_mode: 'HTML'})
        }
        if (match[0] == 'ü§ô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö' && msg.from.id === danila_ID) {
            await bot.sendMessage(msg.from.id, `\n<i>–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ:</i> ${success}\n<i>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</i> ${notSend}`, {parse_mode: 'HTML'})
        }
        if (match[0] == '‚òé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫' && msg.from.id === danila_ID) {
            return bot.sendMessage(msg.chat.id, `\n<b>–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:</b> <i>${listChecksAll}</i>\n<b>–ü—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –º–µ—Å—è—Ü:</b> <i>${listChecksPerMonth}</i>`, {parse_mode: 'HTML'})
        } else {
            msg.chat.id !== danila_ID ? await bot.sendMessage(msg.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫') : ''
        }
    })


    // block for sending messages (only for Danila) --------------
    bot.on('photo', async msg => {
        const chatId = msg.chat.id
        if (chatId === danila_ID) {
            resetFunction()
            listChatIdUsers.map(async (id, i) => {
                try {
                    await bot.sendPhoto(id, msg.photo[1].file_id, {caption: msg.caption}).then(res => success += 1)
                } catch (e) {
                    notSend += 1
                }
                listChatIdUsers.length - 1 === i ? await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã') : ''
            })
        }
    })
    bot.on('text', async msg => {
        const chatId = msg.chat.id
        if (chatId === danila_ID && msg.text.slice(0, 1) === '*') {
            resetFunction()
            listChatIdUsers.map(async (id, i) => {
                try {
                    await bot.sendMessage(id, msg.text.slice(1)).then(res => success += 1)
                } catch (e) {
                    notSend += 1
                }
                listChatIdUsers.length - 1 === i ? await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã') : ''
            })
        }
    })
    const payId = []

    // payment block -----------------------------
    bot.on('callback_query', async msg => {
        const data = msg.data
        const chatId = msg.message.chat.id

        if (data === 'OneCheckVIN') {
            await bot.sendInvoice(
                chatId,
                '1 check VIN',
                '–û–¥–∏–Ω–∞ —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN –Ω–æ–º–µ—Ä—É',
                'payload',
                tokenPayment,
                'RUB',
                [{
                    label: 'check',
                    amount: 45000
                }]
            )
            await bot.on('pre_checkout_query', async ctx => {
                try {
                    return bot.answerPreCheckoutQuery(ctx.id, true)
                } catch (error) {
                    return bot.sendMessage(ctx.id, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞')
                }
            })
            await bot.on('successful_payment', async ctx => {
                try {
                    if (payId.includes(ctx.message_id)) {return}
                    payId.push(ctx.message_id)
                    await bot.sendMessage(ctx.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É`)
                    await listUsersWithCheckPoints[msg.from.id] ? listUsersWithCheckPoints[msg.from.id] += 1 : listUsersWithCheckPoints[msg.from.id] = 1
                    return bot.sendMessage(ctx.chat.id, '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ VIN –Ω–æ–º–µ—Ä—É', KEYBOARD)
                } catch (error) {
                    await bot.sendMessage(ctx.chat.id, `–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã`)
                }
            })
        }


        if (data === 'ThreeCheckVIN') {
            await bot.sendInvoice(
                chatId,
                '3 checks VIN',
                '–¢—Ä–∏ —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN –Ω–æ–º–µ—Ä—É',
                'payload3',
                tokenPayment,
                'RUB',
                [{
                    label: 'check',
                    amount: 89000
                }]
            )
            await bot.on('pre_checkout_query', async ctx => {
                try {
                    return bot.answerPreCheckoutQuery(ctx.id, true)
                } catch (error) {
                    return bot.sendMessage(ctx.id, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞')
                }
            })
            await bot.on('successful_payment', async ctx => {
                try {
                    if (payId.includes(ctx.message_id)) {return}
                    payId.push(ctx.message_id)
                    await bot.sendMessage(ctx.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É`)
                    await listUsersWithCheckPoints[msg.from.id] ? listUsersWithCheckPoints[msg.from.id] += 3 : listUsersWithCheckPoints[msg.from.id] = 3
                    return bot.sendMessage(chatId, '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ VIN –Ω–æ–º–µ—Ä—É', KEYBOARD)
                } catch (error) {
                    await bot.sendMessage(ctx.chat.id, `–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã`)
                }
            })
        }


        if (data === 'FiveCheckVIN') {
            await bot.sendInvoice(
                chatId,
                '5 checks VIN',
                '–ü—è—Ç—å —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN –Ω–æ–º–µ—Ä—É',
                'payload5',
                tokenPayment,
                'RUB',
                [{
                    label: 'check',
                    amount: 99000
                }]
            )
            await bot.on('pre_checkout_query', async ctx => {
                try {
                    return bot.answerPreCheckoutQuery(ctx.id, true)
                } catch (error) {
                    return bot.sendMessage(ctx.id, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞')
                }
            })
            await bot.on('successful_payment', async ctx => {
                try {
                    if (payId.includes(ctx.message_id)) {return}
                    payId.push(ctx.message_id)
                    await bot.sendMessage(ctx.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É`)
                    await listUsersWithCheckPoints[msg.from.id] ? listUsersWithCheckPoints[msg.from.id] += 5 : listUsersWithCheckPoints[msg.from.id] = 5
                    return bot.sendMessage(chatId, '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ VIN –Ω–æ–º–µ—Ä—É', KEYBOARD)
                } catch (error) {
                    await bot.sendMessage(ctx.chat.id, `–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã`)
                }
            })
        }
    })
}
start()


