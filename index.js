const TelegramApi = require('node-telegram-bot-api')
const axios = require('axios')
const token = '6838248687:AAE1ohr2ciZL26u1RtLsRqH9p0cd2EBmNdI'
const bot = new TelegramApi(token, {polling: true})
const fsPromises = require('fs').promises
const sequelize = require('./db')
const Client = require('./models')
const pdf = require('html-pdf');

const tokenPayment = '381764678:TEST:77012'
const instance = axios.create({
    baseURL: "https://www.clearvin.com/rest/vendor/",
});

// static variables---------
const danila_ID = 342056317
const telegramChannelId = '-1001815620648'
const greetings = `<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è!</b> üëã \n\n–Ø - –±–æ—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –≤ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —Ç–∞–∫–∂–µ —è —É–º–µ—é —É–∑–Ω–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN-–Ω–æ–º–µ—Ä—É! \n–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∞–≤—Ç–æ. üöóüí® \n\n<b><i><u>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª</u></i></b>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–Ω–æ–Ω—Å–æ–≤ –∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π + –ø–æ–ª—É—á–∏ –æ–¥–Ω—É <b>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É</b> –¥–ª—è –∞–≤—Ç–æ. üíºüõ£Ô∏è\nt.me/autopodberu`

let success = 0
let notSend = 0

const tokenTest = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbnZpcm9ubWVudCI6InRlc3QiLCJ1c2VyIjp7ImlkIjoyMDg1MTEsImVtYWlsIjoiYXV0b3BvZGJlcnUxKzFAZ21haWwuY29tIn0sInZlbmRvciI6eyJpZCI6MjczLCJzdGF0dXMiOiJhY3RpdmUiLCJpcCI6WyIxNzIuMjAuMTAuMyIsIjU0Ljg2LjUwLjEzOSIsIjE4NS4xMTUuNC4xNDciLCIxODUuMTE1LjUuMjgiLCI1LjE4OC4xMjkuMjM2Il19LCJpYXQiOjE3MDc5MzM1ODksImV4cCI6MTcxMDUyNTU4OX0.t89d5DSDpQisJtJ9CCr_ZBlihPn61UcGKS8riI30AGY'


const KEYBOARD = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ($)', '‚öñ –£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫'],
            ['‚úÖ VIN', 'üëç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'],
        ],
        resize_keyboard: true,
    }),
    parse_mode: 'HTML'
}
const KEYBOARD_ADMIN = {
    reply_markup: JSON.stringify({
        keyboard: [
            ['‚òé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫', 'üíå –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'],
            ['ü§ô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö']
        ],
        resize_keyboard: true
    }),
    parse_mode: 'HTML'
}
const checksOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '1 –ø—Ä–æ–≤–µ—Ä–∫–∞ (380—Ä –∏–ª–∏ 4$)', callback_data: 'OneCheckVIN'}],
            [{text: '3 –ø—Ä–æ–≤–µ—Ä–∫–∏ (1026—Ä –∏–ª–∏ 10.8$)', callback_data: 'ThreeCheckVIN'}],
            [{text: '5 –ø—Ä–æ–≤–µ—Ä–æ–∫ (1520—Ä –∏–ª–∏ 16$)', callback_data: 'FiveCheckVIN'}]
        ]
    }),
    parse_mode: "HTML"
}


const start = async () => {

    try {
        await sequelize.authenticate()
        await sequelize.sync()
    } catch (e) {
        console.log('Connect data failed', e)
    }

    await bot.setMyCommands([
        {command: '/start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'},
    ])

    bot.onText(/(.+)/, async (msg, match) => {
        const chatId = msg.chat.id


        try {
            if (match[0] === '/start' && chatId === danila_ID) {
                return bot.sendMessage(chatId, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –∫—É—Ä—á—è–≤–µ–Ω—å–∫–∏–π –î–∞–Ω–∏–ª–∫–∏–Ω üëãüèª', KEYBOARD_ADMIN)
            }
            if (match[0] === '/start') {
                try {
                    await Client.create({chatId: chatId})
                    return bot.sendMessage(chatId, greetings, KEYBOARD)
                } catch (e) {
                    const user = await Client.findOne({where: {chatId: chatId}})
                    return user && bot.sendMessage(chatId, '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω', KEYBOARD)
                }
            }
            if (match[0] === 'üëç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞') {
                try {
                    const res = await bot.getChatMember(telegramChannelId, chatId)
                    const validFreeCheck = await Client.findOne({where: {chatId: chatId}})

                    if (res.status === 'member' && !validFreeCheck.freeCheck) {
                        try {
                            await Client.increment('checks', {by: 1, where: {chatId: chatId}})
                            await Client.update({freeCheck: true}, {where: {chatId: chatId}})
                            return bot.sendMessage(chatId, '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª <b>AutoPodberu</b> –∏ –∑–∞ —ç—Ç–æ –º—ã –¥–∞—Ä–∏–º –≤–∞–º –æ–¥–Ω—É <b>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É</b> –ø–æ VIN –Ω–æ–º–µ—Ä—É –¥–ª—è –∞–≤—Ç–æ', {parse_mode: 'HTML'})
                        } catch (e) {
                            console.log(e, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É')
                        }
                    }
                    if (res.status === 'member' && validFreeCheck.freeCheck) {
                        return bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª <i><b>AutoPodberu</b></i>.\n\n–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ($)</b>', {parse_mode: 'HTML'})
                    }
                    if (res.status === 'left') {
                        return bot.sendMessage(chatId, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª <i><b>AutoPodberu</b></i>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ VIN –Ω–æ–º–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª <b>t.me/autopodberu</b>\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>'üëç –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É'</b>\n\n", {parse_mode: 'HTML'})
                    } else {
                        await bot.sendMessage(chatId, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É')
                    }
                } catch (e) {
                    return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞')
                }
            }
            if (match[0] === 'üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ($)') {
                return bot.sendMessage(chatId, '<i>–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üé≥</i>', checksOptions)
            }
            if (match[0] === '‚úÖ VIN') {
                return bot.sendMessage(chatId, '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–±–µ–π—Ç–µ –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ <b><i>VIN –Ω–æ–º–µ—Ä</i></b> (<i>17 —Å–∏–º–≤–æ–ª–æ–≤</i>) –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ <i>PDF-—Ñ–∞–π–ª–µ</i> üìÇ\n\n–û—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É ‚öñ', {parse_mode: 'HTML'})
            }
            if (match[0].length === 17) {
                const user = await Client.findOne({where: {chatId: chatId}})
                if (user.checks === 0) {
                    return bot.sendMessage(chatId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ VIN –Ω–æ–º–µ—Ä—É.\n\n–ù–æ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏—Ö –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>üí≥ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ ($)</b>', {parse_mode: 'HTML'})
                }

                if (user.checks > 0) {
                    await bot.sendMessage(chatId, '–ó–∞–ø—Ä–æ—Å –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–∂–∏–¥–∞–π—Ç–µ')
                    const url = `report?vin=${msg.text}&format=pdf&reportTemplate=2021`

                    const objTokenDate = await fsPromises.readFile('../token.js', 'utf8')
                    const time = JSON.parse(objTokenDate).date
                    const timeNow = Math.floor(new Date().getTime() / 1000)

                    if ((timeNow - time) > 7140) {
                        const result = await instance.post('login', {
                            email: "autopodberu1+1@gmail.com",
                            password: "TViGgDAg"
                        })
                        const obj = JSON.stringify({token: result.data.token, date: timeNow})
                        await fsPromises.writeFile('../token.js', obj)
                    }

                    try {
                        const getToken = await fsPromises.readFile('../token.js', 'utf8')
                        const tokenVin = JSON.parse(getToken).token
                        const {data} = await instance.get(url, {
                            headers: {Authorization: `Bearer ${tokenVin}`},
                            responseType: "arraybuffer"
                        })
                        await fsPromises.writeFile(`./${chatId}file.pdf`, data, {encoding: 'binary'});
                        await bot.sendDocument(chatId, `./${chatId}file.pdf`, {}, {
                            filename: `${chatId}file.pdf`,
                            contentType: 'application/pdf'
                        })
                        await fsPromises.unlink(`./${chatId}file.pdf`)
                        await Client.decrement('checks', {by: 1, where: {chatId: chatId}})
                    } catch (e) {
                        await bot.sendMessage(chatId, '–¢–∞–∫–æ–≥–æ VIN –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ –Ω–µ—Ç')
                    }
                }
            }
            if (match[0] === '‚öñ –£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫') {
                const check = await Client.findOne({where: {chatId: chatId}})
                return bot.sendMessage(chatId, `–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫: <b>${check.checks}</b>`, {parse_mode: 'HTML'})
            }


            if (match[0] === 'convert') {
                const vin = '5TDYK3DC8DS290235'
                const url = `report?vin=${vin}&format=html&reportTemplate=2021&locale=ru`
                const {data} = await instance.get(url, {
                    headers: {Authorization: `Bearer ${tokenTest}`},
                })
                await fsPromises.writeFile(`./${chatId}file.html`, data.result.html_report);


                fsPromises.readFile(`./${chatId}file.html`, 'utf-8')
                    .then(htmlContent => {
                        // Convert HTML to PDF
                        return pdf.create(htmlContent).toFile(`./${chatId}file.pdf`);
                    })
                    .then(res => {
                        console.log('PDF created successfully:');
                    })
                    .catch(err => {
                        console.error('Error:', err);
                    });


                await bot.sendDocument(chatId, `./${chatId}file.pdf`, {}, {
                    filename: `${chatId}file.pdf`,
                    contentType: 'application/pdf'
                }).catch(e => console.log(e))

                await fsPromises.unlink(`./${chatId}file.html`)
                await fsPromises.unlink(`./${chatId}file.pdf`)
            }


            // Block options Danila
            if (match[0] === 'üíå –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤' && chatId === danila_ID) {
                return bot.sendMessage(chatId, `\n<b>1) –ß—Ç–æ–±—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:</b> <i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–µ–π.</i>\n\n<b>2) –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏:</b> <i>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ (**) –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º. (–Ω–∞–ø—Ä–∏–º–µ—Ä: **–ü—Ä–∏–≤–µ—Ç —á–µ–ª–æ–≤–µ–∫–∏)</i>`, {parse_mode: 'HTML'})
            }
            if (match[0] === 'ü§ô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö' && chatId === danila_ID) {
                await bot.sendMessage(chatId, `\n<i>–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ:</i> ${success}\n<i>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ:</i> ${notSend}`, {parse_mode: 'HTML'})
            }
            if (match[0] === '‚òé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫' && chatId === danila_ID) {
                const res = await Client.findAll()
                const freeChecks = await Client.findAll({where: {freeCheck: true}})
                const allChecks = res.map(c => c['dataValues']['checks']).reduce((acc, cur) => {
                    acc += cur
                    return acc
                }, 0)
                // const freeChecks = res.map(c => c['dataValues']['freeChecks']).filter(c=>c === true)
                return bot.sendMessage(chatId, `\n<b>–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫—É–ø–ª–µ–Ω–æ:</b> <i>${allChecks - freeChecks.length}</i>\n<b>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É:</b> <i>${freeChecks.length}</i>`, {parse_mode: 'HTML'})
            } else {
                chatId !== danila_ID ? await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫') : ''
            }
        } catch (e) {
            await bot.sendMessage(chatId, 'Something crashed on the server')
        }
    })


    // block for sending messages (only Danila can) --------------
    bot.on('photo', async msg => {
        const chatId = msg.chat.id
        if (chatId === danila_ID) {
            success = 0
            notSend = 0
            const res = await Client.findAll()
            const listIdUsers = res.map(u => u["dataValues"]['chatId'])

            listIdUsers.map(async (id, i) => {
                try {
                    await bot.sendPhoto(id, msg.photo[1].file_id, {caption: msg.caption}).then(res => success += 1)
                } catch (e) {
                    notSend += 1
                }
                listIdUsers.length - 1 === i ? await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã') : ''
            })
        } else {
            return bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫')
        }
    })
    bot.on('text', async msg => {
        const chatId = msg.chat.id
        if (chatId === danila_ID && msg.text.slice(0, 2) === '**') {
            success = 0
            notSend = 0
            const res = await Client.findAll()
            const listIdUsers = res.map(u => u["dataValues"]['chatId'])
            listIdUsers.map(async (id, i) => {
                try {
                    await bot.sendMessage(id, msg.text.slice(2)).then(res => success += 1)
                } catch (e) {
                    notSend += 1
                }
                listIdUsers.length - 1 === i ? await bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã') : ''
            })
        }
    })


    // payment block -----------------------------
    bot.on('callback_query', async (msg) => {
        const data = msg.data
        const chatId = msg.message.chat.id
        if (data === 'OneCheckVIN') {
            await bot.sendInvoice(
                chatId,
                '1 check VIN',
                '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN –Ω–æ–º–µ—Ä—É',
                msg.id,
                tokenPayment,
                'RUB',
                [{
                    label: 'check',
                    amount: 38000
                }]
            )
            await bot.on('pre_checkout_query', async ctx => {
                try {
                    return bot.answerPreCheckoutQuery(ctx.id, true)
                } catch (error) {
                    return error ? bot.sendMessage(ctx.id, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã') : ''
                }
            })
            await bot.on('successful_payment', async ctx => {
                try {
                    if (ctx.successful_payment.invoice_payload === msg.id) {
                        await bot.sendMessage(ctx.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É`)
                        await Client.increment('checks', {by: 1, where: {chatId: chatId}})
                        return bot.sendMessage(ctx.chat.id, '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ VIN –Ω–æ–º–µ—Ä—É')
                    }
                } catch (error) {
                    return bot.sendMessage(ctx.chat.id, `–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã`)
                }
            })
        }


        if (data === 'ThreeCheckVIN') {
            await bot.sendInvoice(
                chatId,
                '3 checks VIN',
                '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ç—Ä–∏ —Ä–∞–∑–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN –Ω–æ–º–µ—Ä—É',
                msg.id,
                tokenPayment,
                'RUB',
                [{
                    label: 'check',
                    amount: 102600
                }]
            )
            await bot.on('pre_checkout_query', async ctx => {
                try {
                    return bot.answerPreCheckoutQuery(ctx.id, true)
                } catch (error) {
                    return bot.sendMessage(ctx.id, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')
                }
            })
            await bot.on('successful_payment', async ctx => {
                try {
                    if (ctx.successful_payment.invoice_payload === msg.id) {
                        await bot.sendMessage(ctx.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É`)
                        await Client.increment('checks', {by: 3, where: {chatId: chatId}})
                        return bot.sendMessage(chatId, '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 3 –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ VIN –Ω–æ–º–µ—Ä—É', KEYBOARD)
                    }
                } catch (error) {
                    await bot.sendMessage(ctx.chat.id, `–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã`)
                }
            })
        }


        if (data === 'FiveCheckVIN') {
            await bot.sendInvoice(
                chatId,
                '5 checks VIN',
                '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—è—Ç—å —Ä–∞–∑ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ –ø–æ VIN –Ω–æ–º–µ—Ä—É',
                msg.id,
                tokenPayment,
                'RUB',
                [{
                    label: 'check',
                    amount: 152000
                }]
            )
            await bot.on('pre_checkout_query', async ctx => {
                try {
                    return bot.answerPreCheckoutQuery(ctx.id, true)
                } catch (error) {
                    return bot.sendMessage(ctx.id, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã')
                }
            })
            await bot.on('successful_payment', async ctx => {
                try {
                    if (ctx.successful_payment.invoice_payload === msg.id) {
                        await bot.sendMessage(ctx.chat.id, `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É`)
                        await Client.increment('checks', {by: 5, where: {chatId: chatId}})
                        return bot.sendMessage(chatId, '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ VIN –Ω–æ–º–µ—Ä—É', KEYBOARD)
                    }
                } catch (error) {
                    await bot.sendMessage(ctx.chat.id, `–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã`)
                }
            })
        }
    })
}
start()


